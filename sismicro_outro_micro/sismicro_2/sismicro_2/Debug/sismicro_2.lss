
sismicro_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e4  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bc  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d8  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d8  00000000  00000000  00001a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  88:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setINT0>:



// configura a Interrupção Externa (INT0)
void setINT0(){
	EICRA = 0b00000010; // interrupção externa INT0 na borada de descida
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000001; // habilita interrupção externa INT0
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	8d bb       	out	0x1d, r24	; 29
	sei();
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <uart_initialization>:
}

void uart_initialization(uint32_t baud){
	uint8_t speed = 16;
	
	baud = (F_CPU/(speed * baud)) - 1;
  9e:	dc 01       	movw	r26, r24
  a0:	cb 01       	movw	r24, r22
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	aa 1f       	adc	r26, r26
  a8:	bb 1f       	adc	r27, r27
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	aa 1f       	adc	r26, r26
  b0:	bb 1f       	adc	r27, r27
  b2:	9c 01       	movw	r18, r24
  b4:	ad 01       	movw	r20, r26
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	44 1f       	adc	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	44 1f       	adc	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	74 e2       	ldi	r23, 0x24	; 36
  ca:	84 ef       	ldi	r24, 0xF4	; 244
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodsi4>
  d2:	ba 01       	movw	r22, r20
  d4:	a9 01       	movw	r20, r18
  d6:	41 50       	subi	r20, 0x01	; 1
  d8:	51 09       	sbc	r21, r1
  da:	61 09       	sbc	r22, r1
  dc:	71 09       	sbc	r23, r1
	
	UBRR0H = (baud) >> 8;
  de:	bb 27       	eor	r27, r27
  e0:	a7 2f       	mov	r26, r23
  e2:	96 2f       	mov	r25, r22
  e4:	85 2f       	mov	r24, r21
  e6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = baud;
  ea:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0A = 0;
  ee:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B |= (1 << TXEN0);
  f2:	e1 ec       	ldi	r30, 0xC1	; 193
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  fc:	8e e0       	ldi	r24, 0x0E	; 14
  fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	sei();
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <uart_send_byte>:
uint8_t systemUp = 0;
uint8_t buttonStillPressed = 0;
uint8_t estado_botao = 0;

void uart_send_byte(uint8_t data){
	while(!( UCSR0A & (1<<UDRE0)));
 106:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <uart_send_byte>
	UDR0 = data;	
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 112:	08 95       	ret

00000114 <systemOn>:
}

void systemOn(){
	estado_botao ^= PIND2;
 114:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	89 27       	eor	r24, r25
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	if (estado_botao){
 120:	88 23       	and	r24, r24
 122:	21 f0       	breq	.+8      	; 0x12c <systemOn+0x18>
		PORTB |= (1<<5);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	80 62       	ori	r24, 0x20	; 32
 128:	85 b9       	out	0x05, r24	; 5
 12a:	08 95       	ret
	}else{
		PORTB &= ~(1<<5);
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	85 b9       	out	0x05, r24	; 5
 132:	08 95       	ret

00000134 <main>:

float datas_recieve;

int main(void)
{
	setINT0();
 134:	0e 94 48 00 	call	0x90	; 0x90 <setINT0>
	uart_initialization(9600);
 138:	60 e8       	ldi	r22, 0x80	; 128
 13a:	75 e2       	ldi	r23, 0x25	; 37
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 4f 00 	call	0x9e	; 0x9e <uart_initialization>
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0x10>

00000146 <__vector_1>:
		
    }
	
}

ISR(INT0_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	systemOn();
 168:	0e 94 8a 00 	call	0x114	; 0x114 <systemOn>
	data = estado_botao;
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data>
	uart_send_byte(data);
 174:	0e 94 83 00 	call	0x106	; 0x106 <uart_send_byte>
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_18>:

ISR(USART_RX_vect){
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	datas_recieve = UDR0;
 1bc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__floatunsisf>
 1ca:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <datas_recieve>
 1ce:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <datas_recieve+0x1>
 1d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <datas_recieve+0x2>
 1d6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <datas_recieve+0x3>
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__floatunsisf>:
 1fc:	e8 94       	clt
 1fe:	09 c0       	rjmp	.+18     	; 0x212 <__floatsisf+0x12>

00000200 <__floatsisf>:
 200:	97 fb       	bst	r25, 7
 202:	3e f4       	brtc	.+14     	; 0x212 <__floatsisf+0x12>
 204:	90 95       	com	r25
 206:	80 95       	com	r24
 208:	70 95       	com	r23
 20a:	61 95       	neg	r22
 20c:	7f 4f       	sbci	r23, 0xFF	; 255
 20e:	8f 4f       	sbci	r24, 0xFF	; 255
 210:	9f 4f       	sbci	r25, 0xFF	; 255
 212:	99 23       	and	r25, r25
 214:	a9 f0       	breq	.+42     	; 0x240 <__floatsisf+0x40>
 216:	f9 2f       	mov	r31, r25
 218:	96 e9       	ldi	r25, 0x96	; 150
 21a:	bb 27       	eor	r27, r27
 21c:	93 95       	inc	r25
 21e:	f6 95       	lsr	r31
 220:	87 95       	ror	r24
 222:	77 95       	ror	r23
 224:	67 95       	ror	r22
 226:	b7 95       	ror	r27
 228:	f1 11       	cpse	r31, r1
 22a:	f8 cf       	rjmp	.-16     	; 0x21c <__floatsisf+0x1c>
 22c:	fa f4       	brpl	.+62     	; 0x26c <__floatsisf+0x6c>
 22e:	bb 0f       	add	r27, r27
 230:	11 f4       	brne	.+4      	; 0x236 <__floatsisf+0x36>
 232:	60 ff       	sbrs	r22, 0
 234:	1b c0       	rjmp	.+54     	; 0x26c <__floatsisf+0x6c>
 236:	6f 5f       	subi	r22, 0xFF	; 255
 238:	7f 4f       	sbci	r23, 0xFF	; 255
 23a:	8f 4f       	sbci	r24, 0xFF	; 255
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	16 c0       	rjmp	.+44     	; 0x26c <__floatsisf+0x6c>
 240:	88 23       	and	r24, r24
 242:	11 f0       	breq	.+4      	; 0x248 <__floatsisf+0x48>
 244:	96 e9       	ldi	r25, 0x96	; 150
 246:	11 c0       	rjmp	.+34     	; 0x26a <__floatsisf+0x6a>
 248:	77 23       	and	r23, r23
 24a:	21 f0       	breq	.+8      	; 0x254 <__floatsisf+0x54>
 24c:	9e e8       	ldi	r25, 0x8E	; 142
 24e:	87 2f       	mov	r24, r23
 250:	76 2f       	mov	r23, r22
 252:	05 c0       	rjmp	.+10     	; 0x25e <__floatsisf+0x5e>
 254:	66 23       	and	r22, r22
 256:	71 f0       	breq	.+28     	; 0x274 <__floatsisf+0x74>
 258:	96 e8       	ldi	r25, 0x86	; 134
 25a:	86 2f       	mov	r24, r22
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	2a f0       	brmi	.+10     	; 0x26c <__floatsisf+0x6c>
 262:	9a 95       	dec	r25
 264:	66 0f       	add	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	88 1f       	adc	r24, r24
 26a:	da f7       	brpl	.-10     	; 0x262 <__floatsisf+0x62>
 26c:	88 0f       	add	r24, r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	97 f9       	bld	r25, 7
 274:	08 95       	ret

00000276 <__udivmodsi4>:
 276:	a1 e2       	ldi	r26, 0x21	; 33
 278:	1a 2e       	mov	r1, r26
 27a:	aa 1b       	sub	r26, r26
 27c:	bb 1b       	sub	r27, r27
 27e:	fd 01       	movw	r30, r26
 280:	0d c0       	rjmp	.+26     	; 0x29c <__udivmodsi4_ep>

00000282 <__udivmodsi4_loop>:
 282:	aa 1f       	adc	r26, r26
 284:	bb 1f       	adc	r27, r27
 286:	ee 1f       	adc	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	a2 17       	cp	r26, r18
 28c:	b3 07       	cpc	r27, r19
 28e:	e4 07       	cpc	r30, r20
 290:	f5 07       	cpc	r31, r21
 292:	20 f0       	brcs	.+8      	; 0x29c <__udivmodsi4_ep>
 294:	a2 1b       	sub	r26, r18
 296:	b3 0b       	sbc	r27, r19
 298:	e4 0b       	sbc	r30, r20
 29a:	f5 0b       	sbc	r31, r21

0000029c <__udivmodsi4_ep>:
 29c:	66 1f       	adc	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	88 1f       	adc	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	1a 94       	dec	r1
 2a6:	69 f7       	brne	.-38     	; 0x282 <__udivmodsi4_loop>
 2a8:	60 95       	com	r22
 2aa:	70 95       	com	r23
 2ac:	80 95       	com	r24
 2ae:	90 95       	com	r25
 2b0:	9b 01       	movw	r18, r22
 2b2:	ac 01       	movw	r20, r24
 2b4:	bd 01       	movw	r22, r26
 2b6:	cf 01       	movw	r24, r30
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
